{"version":3,"file":"lottie-interactivity.min.js","sources":["../src/main.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options } = DEFAULT_OPTIONS) {\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n  }\n\n  getContainerVisibility() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n  }\n\n  getContainerCursorPosition(cursorX, cursorY) {\n    const { top, left, width, height } = this.container.getBoundingClientRect();\n\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n\n    return { x, y };\n  }\n\n  start() {\n    const Parentscope = this;\n    // Configure player for start\n    if (this.mode === 'scroll') {\n      this.player.addEventListener('DOMLoaded', function () {\n        Parentscope.player.stop();\n        window.addEventListener('scroll', Parentscope.#scrollHandler);\n      });\n    }\n\n    if (this.mode === 'cursor') {\n      this.player.addEventListener('DOMLoaded', function () {\n        Parentscope.player.loop = true;\n        Parentscope.player.stop();\n        Parentscope.container.addEventListener('mousemove', Parentscope.#mousemoveHandler);\n        Parentscope.container.addEventListener('mouseout', Parentscope.#mouseoutHandler);\n      });\n    }\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler);\n    }\n\n    if (this.mode === 'cursor') {\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('mouseout', this.#mouseoutHandler);\n    }\n  }\n\n  #mousemoveHandler = e => {\n    this.#cursorHandler(e.clientX, e.clientY);\n  };\n\n  #mouseoutHandler = () => {\n    this.#cursorHandler(-1, -1);\n  };\n\n  animate({ timing, draw, duration }) {\n    let start = performance.now();\n\n    requestAnimationFrame(function animate(time) {\n      // timeFraction goes from 0 to 1\n      let timeFraction = (time - start) / duration;\n      if (timeFraction > 1) timeFraction = 1;\n\n      // calculate the current animation state\n      let progress = timing(timeFraction);\n\n      draw(progress); // draw it\n\n      if (timeFraction < 1) {\n        requestAnimationFrame(animate);\n      }\n    });\n  }\n\n  #cursorHandler = (x, y) => {\n    // Resolve cursor position if cursor is inside container\n    if (x !== -1 && y !== -1) {\n      // Get container cursor position\n      const pos = this.getContainerCursorPosition(x, y);\n\n      // Use the resolved position\n      x = pos.x;\n      y = pos.y;\n    }\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ position }) => {\n      if (Array.isArray(position.x) && Array.isArray(position.y)) {\n        return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n      } else if (!Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n        return x === position.x && y === position.y;\n      }\n\n      return false;\n    });\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n      const yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n\n      this.player.playSegments(action.frames, true);\n\n      if (action.position.y[0] < 0 && action.position.y[1] > 1) {\n        this.player.goToAndStop(Math.floor(xPercent * this.player.totalFrames), true);\n      } else {\n        this.player.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) * this.player.totalFrames), true);\n      }\n    } else if (action.type === 'loop') {\n      this.player.playSegments(action.frames, true);\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (this.player.isPaused === true) {\n        this.player.resetSegments();\n      }\n      this.player.playSegments(action.frames);\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n\n  #scrollHandler = () => {\n    // Get container visibility percentage\n\n    const currentPercent = this.getContainerVisibility();\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(\n      ({ visibility }) => currentPercent >= visibility[0] && currentPercent <= visibility[1],\n    );\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      this.player.goToAndStop(\n        Math.ceil(\n          ((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0])) *\n            this.player.totalFrames,\n        ),\n        true,\n      );\n    } else if (action.type === 'loop') {\n      this.player.loop = true;\n      // Loop: Loop a given frames\n      if (this.assignedSegment === null) {\n        // if not playing any segments currently. play those segments and save to state\n        this.player.playSegments(action.frames, true);\n        this.assignedSegment = action.frames;\n      } else {\n        // if playing any segments currently.\n        //check if segments in state are equal to the frames selected by action\n        if (this.assignedSegment !== action.frames) {\n          // if they are not equal. new segments are to be loaded\n          this.player.playSegments(action.frames, true);\n          this.assignedSegment = action.frames;\n        } else {\n          // if they are equal the play method must be called only if lottie is paused\n          if (this.player.isPaused === true) {\n            this.player.playSegments(action.frames, true);\n            this.assignedSegment = action.frames;\n          }\n        }\n      }\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (!this.scrolledAndPlayed) {\n        this.scrolledAndPlayed = true;\n        this.player.resetSegments(true);\n        this.player.play();\n      }\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],"names":["DEFAULT_OPTIONS","player","LottieInteractivity","actions","container","mode","options","e","_this","clientX","clientY","x","y","pos","getContainerCursorPosition","action","find","position","Array","isArray","Number","isNaN","type","xPercent","yPercent","playSegments","frames","goToAndStop","Math","floor","totalFrames","ceil","isPaused","resetSegments","currentPercent","getContainerVisibility","visibility","loop","assignedSegment","scrolledAndPlayed","play","_typeof","constructor","name","elem","document","querySelector","nodeName","getLottie","HTMLElement","Error","wrapper","this","getBoundingClientRect","top","height","window","innerHeight","cursorX","cursorY","left","width","Parentscope","addEventListener","stop","removeEventListener","timing","draw","duration","start","performance","now","requestAnimationFrame","animate","time","timeFraction","progress","create","instance"],"mappings":"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"}